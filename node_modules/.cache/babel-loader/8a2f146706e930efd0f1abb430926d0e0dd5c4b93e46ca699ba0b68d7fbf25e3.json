{"ast":null,"code":"var _jsxFileName = \"/Users/reliancehealth/Desktop/TUNE-MUSIC-PLATFORM/tune_webapp/src/components/main/main.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Search from \"./search\";\nimport Trending from \"./trending\";\nimport Playbar from \"./playbar\";\nimport Results from \"./results\";\nimport BrowseCategories from \"./browsecategories\"; // Assuming you have a component for Browse Categories\nimport \"./main.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  _s();\n  const [tracks, setTracks] = useState([]);\n  const [artists, setArtists] = useState([]);\n  const [albums, setAlbums] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState(null);\n  const [searchMade, setSearchMade] = useState(false); // State to track if search is made\n\n  const audioRef = /*#__PURE__*/React.createRef(); // Create the audio ref\n\n  useEffect(() => {\n    console.log(tracks, \"Logging tracks from Main Component\");\n  }, [tracks]);\n  useEffect(() => {\n    console.log(artists, \"Logging artist from Main Component\");\n  }, [artists]);\n  useEffect(() => {\n    console.log(albums, \"Logging artist from Main Component\");\n  }, [albums]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      setSearchArtists: setArtists,\n      setSearchTracks: setTracks,\n      setSearchAlbum: setAlbums,\n      setSearchMade: setSearchMade // Pass setSearchMade function to track search\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 4\n    }, this), searchMade ? /*#__PURE__*/_jsxDEV(Results, {\n      results: {\n        artists,\n        tracks,\n        albums\n      },\n      audioRef: audioRef,\n      currentTrack: currentTrack,\n      setCurrentTrack: setCurrentTrack,\n      tracks: tracks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(BrowseCategories, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(Trending, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Playbar, {\n        audioRef: audioRef,\n        currentTrack: currentTrack,\n        tracks: tracks,\n        setCurrentTrack: setCurrentTrack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 3\n  }, this);\n}\n_s(Main, \"ANh2gA97ZRrM8lNM6L742Y5uQMw=\");\n_c = Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","Search","Trending","Playbar","Results","BrowseCategories","jsxDEV","_jsxDEV","Fragment","_Fragment","Main","_s","tracks","setTracks","artists","setArtists","albums","setAlbums","currentTrack","setCurrentTrack","searchMade","setSearchMade","audioRef","createRef","console","log","className","children","setSearchArtists","setSearchTracks","setSearchAlbum","fileName","_jsxFileName","lineNumber","columnNumber","results","_c","$RefreshReg$"],"sources":["/Users/reliancehealth/Desktop/TUNE-MUSIC-PLATFORM/tune_webapp/src/components/main/main.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Search from \"./search\";\nimport Trending from \"./trending\";\nimport Playbar from \"./playbar\";\nimport Results from \"./results\";\nimport BrowseCategories from \"./browsecategories\"; // Assuming you have a component for Browse Categories\nimport \"./main.css\";\n\nexport default function Main() {\n\tconst [tracks, setTracks] = useState([]);\n\tconst [artists, setArtists] = useState([]);\n\tconst [albums, setAlbums] = useState([]);\n\tconst [currentTrack, setCurrentTrack] = useState(null);\n\tconst [searchMade, setSearchMade] = useState(false); // State to track if search is made\n\n\tconst audioRef = React.createRef(); // Create the audio ref\n\n\tuseEffect(() => {\n\t\tconsole.log(tracks, \"Logging tracks from Main Component\");\n\t}, [tracks]);\n\n\tuseEffect(() => {\n\t\tconsole.log(artists, \"Logging artist from Main Component\");\n\t}, [artists]);\n\n\tuseEffect(() => {\n\t\tconsole.log(albums, \"Logging artist from Main Component\");\n\t}, [albums]);\n\n\treturn (\n\t\t<div className=\"main\">\n\t\t\t<Search\n\t\t\t\tsetSearchArtists={setArtists}\n\t\t\t\tsetSearchTracks={setTracks}\n\t\t\t\tsetSearchAlbum={setAlbums}\n\t\t\t\tsetSearchMade={setSearchMade} // Pass setSearchMade function to track search\n\t\t\t/>\n\n\t\t\t{/* Conditionally render BrowseCategories or Results based on searchMade state */}\n\t\t\t{searchMade ? (\n\t\t\t\t<Results\n\t\t\t\t\tresults={{ artists, tracks, albums }}\n\t\t\t\t\taudioRef={audioRef}\n\t\t\t\t\tcurrentTrack={currentTrack}\n\t\t\t\t\tsetCurrentTrack={setCurrentTrack}\n\t\t\t\t\ttracks={tracks}\n\t\t\t\t/>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<BrowseCategories />\n\t\t\t\t\t<Trending />\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t<div>\n\t\t\t\t<Playbar\n\t\t\t\t\taudioRef={audioRef}\n\t\t\t\t\tcurrentTrack={currentTrack}\n\t\t\t\t\ttracks={tracks}\n\t\t\t\t\tsetCurrentTrack={setCurrentTrack}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}